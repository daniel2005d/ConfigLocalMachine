
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: $VENV_ACTIVE_NAME ($VENV_ACTIVE_PATH)"
            return 0
    else
        return 1
    fi
}
# Función para crear o retomar un "workspace"
addworkspace() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local logfile="$wsdir/${wsname}.log"
    local metafile="$wsdir/${wsname}.meta"

    if [[ -f "$logfile" ]]; then
        # Ya existe, recuperar metadata
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
        echo "🔄 Continuando sesión, almacenando en: $logfile"
    else
        # Crear nuevo workspace
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
        echo "📂 Guardando en: $logfile"
    fi

    # Ejecutar una subshell con registro
    script -a -f -q "$logfile"
}


# Función para listar los workspaces disponibles
listworkspaces() {
    local wsdir="$PWD/.workspaces"

    if [[ ! -d "$wsdir" ]]; then
        echo "❌ No hay ningún workspace creado todavía."
        return 1
    fi

    echo "📋 Lista de workspaces:"
    echo "--------------------------------------------"
    for metafile in "$wsdir"/*.meta; do
        # Si no hay ninguno, salir
        [[ -e "$metafile" ]] || { echo "⚠️ No se encontraron workspaces."; return 0; }

        local wsname
        wsname=$(basename "$metafile" .meta)
        local created_at
        created_at=$(cat "$metafile")
        local logfile="$wsdir/${wsname}.log"

        printf "📂 %-20s | Creado: %-20s | Log: %s\n" "$wsname" "$created_at" "$logfile"
    done
    echo "--------------------------------------------"
}


addworkspace_tmux() {
    local wsname="$1"

    if [[ -z "$wsname" ]]; then
        echo "❌ Debes indicar un nombre de workspace"
        echo "Uso: addworkspace_tmux NOMBRE"
        return 1
    fi

    # Carpeta donde se guardarán los workspaces
    local wsdir="$PWD/.workspaces"
    mkdir -p "$wsdir"

    local metafile="$wsdir/${wsname}.meta"

    if [[ -d "$wsdir/$wsname" ]]; then
        if [[ -f "$metafile" ]]; then
            local created_at
            created_at=$(cat "$metafile")
            echo "ℹ️ Workspace '$wsname' ya existe (creado el $created_at)."
        else
            echo "ℹ️ Workspace '$wsname' ya existe."
        fi
    else
        mkdir -p "$wsdir/$wsname"
        date "+%Y-%m-%d %H:%M:%S" > "$metafile"
        echo "🆕 Workspace '$wsname' creado el $(cat "$metafile")"
    fi

    echo "📂 Logs en: $wsdir/$wsname/"

    # Crear nueva sesión tmux si no existe
    if ! tmux has-session -t "$wsname" 2>/dev/null; then
        tmux new-session -d -s "$wsname"
    fi

    # Configurar logging de cada pane con timestamp
    for p in $(tmux list-panes -a -t "$wsname" -F "#{session_name}:#{window_index}.#{pane_index}"); do
        logfile="$wsdir/$wsname/${p}.out.log"
        tmux pipe-pane -o -t "$p" "ts '[%Y-%m-%d %H:%M:%S] ' >> $logfile"
        echo "   - Pane $p loggeado en $logfile"
    done

    # Configurar que cada bash dentro de tmux guarde comandos con timestamp
    # Esto se inyecta como variable de entorno al crear nuevos panes/ventanas
    tmux set-environment -t "$wsname" HISTFILE "$wsdir/$wsname/${wsname}.cmd.log"
    tmux set-environment -t "$wsname" HISTTIMEFORMAT "%F %T "
    tmux set-environment -t "$wsname" PROMPT_COMMAND "history -a; history -c; history -r; \$PROMPT_COMMAND"

    # Adjuntarse a la sesión
    tmux attach -t "$wsname"
}

env(){
    local key=$1
    local venv_path

    case "$key" in
    scripts)
        venv_path="/opt/scripts/.venv/"
        ;;
    impacket)
        venv_path="/opt/impacket"
        ;;
    *)
        echo "You need select a valid option"
        return 2
        ;;
    esac
    
    if [ -f "$venv_path/bin/activate" ]; then
            # '.' es equivalente a 'source' y más portable en sh
            . "$venv_path/bin/activate"
            echo "Activado: ($key)"
            return 0
    else
        return 1
    fi
}
